{"version":3,"sources":["Components/TopBar.js","Components/Orders.js","Components/Sold.js","Components/Trending.js","App.js","serviceWorker.js","index.js"],"names":["Component","Orders","props","getOrders","offset","limit","fetch","then","res","json","data","cards","orders","map","card","asset","name","tokenId","token_id","thumbnail","image_thumbnail_url","price","current_price","time","created_date","setState","state","bind","this","timer","setInterval","clearInterval","classes","currentTime","Date","Fragment","Grid","item","xs","Paper","className","paper","Toolbar","Typography","variant","Tooltip","helpIcon","placement","title","fontSize","length","CircularProgress","Table","size","TableHead","TableRow","TableCell","TableBody","index","cardTime","setHours","getHours","diff","minutes","Math","floor","seconds","hover","key","Avatar","alt","src","substr","indexOf","React","withStyles","theme","padding","spacing","textAlign","color","palette","text","secondary","marginLeft","Sold","getSold","asset_events","total_price","event_timestamp","now","Trending","getTrending","cardsMap","cardsArr","lastTx","txIndex","transaction","id","count","push","sort","a","b","createMuiTheme","type","root","flexGrow","chart","container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.efab7b99.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Hidden from '@material-ui/core/Hidden';\n\nclass TopBar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      open: false,\n    }\n\n    this.toggleDrawer = this.toggleDrawer.bind(this);\n  }\n\n  toggleDrawer = () => {\n    this.setState({ open: !this.state.open });\n  };\n\n  render() {\n    return (\n      <AppBar position=\"static\">\n        <Toolbar variant=\"dense\">\n          {/* <Hidden mdUp>\n            <IconButton color=\"inherit\" aria-label=\"Menu\" onClick={this.toggleDrawer}>\n              <MenuIcon />\n            </IconButton>\n          </Hidden> */}\n          <div style={{ flex: 1 }} />\n          {/* <div>\n            {!!selectedBusiness && \n              <React.Fragment>\n                <Typography color=\"inherit\" style={{ display: 'inline-block', marginRight: '16px' }}>{selectedBusiness.name}</Typography>\n                <Typography color=\"inherit\" style={{ display: 'inline-block', marginRight: '16px' }}>|</Typography>\n              </React.Fragment>\n            }\n            {!!user &&\n              <React.Fragment>\n                <Typography color=\"inherit\" style={{ display: 'inline-block', marginRight: '16px' }}>{user.email}</Typography>\n              </React.Fragment>\n            }\n          </div> */}\n        </Toolbar>\n        {/* <Drawer anchor=\"top\" open={this.state.open} onClose={this.toggleDrawer}>\n          <div\n            tabIndex={0}\n            role=\"button\"\n            onClick={this.toggleDrawer}\n            onKeyDown={this.toggleDrawer}\n          >\n            <TopNav/>\n          </div>\n        </Drawer> */}\n      </AppBar>\n    );\n  }\n}\n\nexport default TopBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpIcon from '@material-ui/icons/HelpOutline';\n\nconst styles = theme => ({\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  helpIcon: {\n    marginLeft: theme.spacing(1),\n  }\n});\n\nclass Orders extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cards: [],\n    }\n\n    this.getOrders = this.getOrders.bind(this);\n  }\n\n  componentDidMount() {\n    this.getOrders(0,20)\n    this.timer = setInterval(()=> this.getOrders(0,20), 15000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer)\n    this.timer = null;\n  }\n\n  getOrders = (offset, limit) => {\n    fetch('https://api.opensea.io/wyvern/v1/orders?asset_contract_address=0x0e3a2a1f2146d86a604adc220b4967a898d7fe07&limit=100&side=1')\n    .then(res => {\n      return res.json()\n    }).then(data => {\n      let cards = data.orders.map((card) => {\n        // console.log(card)\n        let asset = card.asset\n        return(asset ? { name: asset.name, tokenId: asset.token_id, thumbnail: asset.image_thumbnail_url, price: card.current_price/1000000000000000000, time: card.created_date } : {})\n      })\n      this.setState({cards: cards})\n    })\n  }\n\n  render() {\n    const { classes } = this.props;\n    let currentTime = new Date();\n\n    return (\n      <React.Fragment>\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>\n            <Toolbar>\n              <Typography variant=\"h6\">\n                Newly Listed\n              </Typography>\n              <Tooltip className={classes.helpIcon} placement=\"right\" title=\"Currently only supports OpenSea orders. Auto refreshes every 15s\">\n                <HelpIcon fontSize=\"small\" />\n              </Tooltip>\n            </Toolbar>\n            {this.state.cards.length <= 0 &&\n              <CircularProgress />\n            }\n            {this.state.cards.length > 0 &&\n              <Table size={'small'}>\n                <TableHead>\n                  <TableRow>\n                    <TableCell></TableCell>\n                    <TableCell>Name</TableCell>\n                    <TableCell>Price (ETH)</TableCell>\n                    <TableCell>Time Past</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {this.state.cards.map((card, index) => {\n                    let cardTime = new Date(card.time);\n                    cardTime.setHours(cardTime.getHours() - 8);\n\n                    let diff = currentTime - cardTime;\n                    let minutes = Math.floor(diff/60000);\n                    let seconds = Math.floor(diff/1000);\n                    return (\n                      <TableRow hover key={index}>\n                        <TableCell><Avatar variant=\"square\" alt={card.name} src={card.thumbnail} /></TableCell>\n                        <TableCell>{card.name.substr(0, card.name.indexOf(\"ID #\")-1)}</TableCell>\n                        <TableCell>{card.price}</TableCell>\n                        <TableCell>{minutes > 0 ? minutes + ' mins' : seconds + ' secs'}</TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            }\n          </Paper>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nOrders.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Orders);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpIcon from '@material-ui/icons/HelpOutline';\n\nconst styles = theme => ({\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  helpIcon: {\n    marginLeft: theme.spacing(1),\n  }\n});\n\nclass Sold extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cards: [],\n    }\n\n    this.getSold = this.getSold.bind(this);\n  }\n\n  componentDidMount() {\n    this.getSold(0,20)\n    this.timer = setInterval(()=> this.getSold(0,20), 15000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer)\n    this.timer = null;\n  }\n\n  getSold = (offset, limit) => {\n    fetch('https://api.opensea.io/api/v1/events?asset_contract_address=0x0e3a2a1f2146d86a604adc220b4967a898d7fe07&event_type=successful&limit=100')\n    .then(res => {\n      return res.json()\n    }).then(data => {\n      let cards = data.asset_events.map((card) => {\n        let asset = card.asset\n        return(asset ? { name: asset.name, tokenId: asset.token_id, thumbnail: asset.image_thumbnail_url, price: card.total_price/1000000000000000000, time: card.event_timestamp } : {})\n      })\n      this.setState({cards: cards})\n    })\n  }\n\n  render() {\n    const { classes } = this.props;\n    let currentTime = Date.now();\n\n    return (\n      <React.Fragment>\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>\n            <Toolbar>\n              <Typography variant=\"h6\">\n                Recently Sold\n              </Typography>\n              <Tooltip className={classes.helpIcon} placement=\"right\" title=\"Shows both OpenSea and TokenTrove. Auto refreshes every 15s\">\n                <HelpIcon fontSize=\"small\" />\n              </Tooltip>\n            </Toolbar>\n            {this.state.cards.length <= 0 &&\n              <CircularProgress />\n            }\n            {this.state.cards.length > 0 &&\n              <Table size={'small'}>\n                <TableHead>\n                  <TableRow>\n                    <TableCell></TableCell>\n                    <TableCell>Name</TableCell>\n                    <TableCell>Price (ETH)</TableCell>\n                    <TableCell>Time Past</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {this.state.cards.map((card, index) => {\n                    let cardTime = new Date(card.time);\n                    cardTime.setHours(cardTime.getHours() - 8);\n\n                    let diff = currentTime - cardTime;\n                    let minutes = Math.floor(diff/60000);\n                    let seconds = Math.floor(diff/1000);\n                    return (\n                      <TableRow hover key={index}>\n                        <TableCell><Avatar variant=\"square\" alt={card.name} src={card.thumbnail} /></TableCell>\n                        <TableCell>{card.name && card.name.substr(0, card.name.indexOf(\"ID #\")-1)}</TableCell>\n                        <TableCell>{card.price}</TableCell>\n                        <TableCell>{minutes > 0 ? minutes + ' mins' : seconds + ' secs'}</TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            }\n          </Paper>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nSold.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Sold);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpIcon from '@material-ui/icons/HelpOutline';\n\nconst styles = theme => ({\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  helpIcon: {\n    marginLeft: theme.spacing(1),\n  }\n});\n\nclass Trending extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      lastTx: 0,\n      cards: [],\n      cardsMap: {},\n    }\n\n    this.getTrending = this.getTrending.bind(this);\n  }\n\n  componentDidMount() {\n    this.getTrending()\n    this.timer = setInterval(()=> this.getTrending(0,20), 15000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer)\n    this.timer = null;\n  }\n\n  getTrending = () => {\n    // let date = new Date();\n    // date.setHours(date.getHours()+8);\n    // date.setDate(date.getDate()-1);\n\n    let cardsMap = this.state.cardsMap\n    let cardsArr = []\n\n    fetch('https://api.opensea.io/api/v1/events?asset_contract_address=0x0e3a2a1f2146d86a604adc220b4967a898d7fe07&event_type=successful&limit=300')\n    .then(res => {\n      return res.json()\n    }).then(data => {\n      let lastTx = this.state.lastTx\n      let txIndex = this.state.lastTx\n\n      data.asset_events.map((card) => {\n        let asset = card.asset\n        // let cardTime = new Date(card.event_timestamp)\n\n        if (asset && card.transaction.id > lastTx) {\n          if (cardsMap[asset.image_thumbnail_url]) {\n            cardsMap[asset.image_thumbnail_url].count = cardsMap[asset.image_thumbnail_url].count + 1;\n          } else {\n            cardsMap[asset.image_thumbnail_url] = { name: asset.name, thumbnail: asset.image_thumbnail_url, count: 1 }\n          }\n          txIndex = card.transaction.id > txIndex ? card.transaction.id : txIndex\n        }\n      })\n      this.setState({lastTx: txIndex})\n    })\n\n    for (let item in cardsMap) {\n      cardsArr.push(cardsMap[item])\n    }\n\n    cardsArr.sort((a,b) => {\n      return (a.count < b.count) ? 1 : -1\n    })\n\n    this.setState({cards: cardsArr, cardsMap: cardsMap})\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <React.Fragment>\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>\n            <Toolbar>\n              <Typography variant=\"h6\">\n                Trending\n              </Typography>\n              <Tooltip className={classes.helpIcon} placement=\"right\" title=\"Shows cards bought since this page was loaded. Auto refreshes every 15s\">\n                <HelpIcon fontSize=\"small\" />\n              </Tooltip>\n            </Toolbar>\n            {this.state.cards.length <= 0 &&\n              <CircularProgress />\n            }\n            {this.state.cards.length > 0 &&\n              <Table size={'small'}>\n                <TableHead>\n                  <TableRow>\n                    <TableCell></TableCell>\n                    <TableCell>Name</TableCell>\n                    <TableCell>Count</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {this.state.cards.map((card, index) => {\n                    return (\n                      <TableRow hover key={index}>\n                        <TableCell><Avatar variant=\"square\" alt={card.name} src={card.thumbnail} /></TableCell>\n                        <TableCell>{card.name.substr(0, card.name.indexOf(\"ID #\")-1)}</TableCell>\n                        <TableCell>{card.count}</TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            }\n          </Paper>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nTrending.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Trending);","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\n\nimport TopBar from './Components/TopBar';\nimport Orders from './Components/Orders';\nimport Sold from './Components/Sold';\nimport Trending from './Components/Trending';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    // padding: theme.spacing(4),\n  },\n  chart: {\n    flexGrow: 1,\n    padding: theme.spacing(6),\n  },\n  text: {\n    padding: theme.spacing(6),\n  },\n});\n\nfunction App(props) {\n  const { classes } = props;\n  return (\n    <React.Fragment>\n      <MuiThemeProvider theme={theme}>\n        <Grid container spacing={2} className={classes.root}>\n          {/* <AppBar position=\"static\" color=\"\">\n            <Toolbar variant=\"dense\"></Toolbar>\n          </AppBar> */}\n\n          <Grid container spacing={2} className={classes.chart}>\n            <Grid item xs={12}>\n              <Paper className={classes.text}>\n                <Typography>\n                  Hey all! I'm planning on adding more features in the future. If you'd like to contribute to this project you can send ETH to 0x91C20ef6477c4Ff9CfeCC48861E56c0dA1Dd37fD :)\n                </Typography>\n                <Typography>\n                  For feedback and suggestions use discord: FourShore#9099\n                </Typography>\n              </Paper>\n            </Grid>\n            <Grid item xs={3}>\n              <Trending/>\n            </Grid>\n            <Grid item xs={5}>\n              <Orders/>\n            </Grid>\n            <Grid item xs={4}>\n              <Sold/>\n            </Grid>\n          </Grid>\n        </Grid>\n      </MuiThemeProvider>\n    </React.Fragment>\n  );\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}