{"version":3,"sources":["Components/Orders.js","Components/Sold.js","Components/CardDetails.js","Components/Trending.js","Components/History.js","App.js","serviceWorker.js","index.js"],"names":["Orders","props","getOsOrders","fetch","then","res","json","data","cards","orders","map","card","asset","name","tokenId","token_id","thumbnail","image_thumbnail_url","preview","image_preview_url","price","current_price","time","created_date","marketplace","setState","osOrders","getTtOrders","method","headers","Headers","metadata","JSON","parse","proto","token_proto","split","date","Date","created_at","setHours","getHours","takerAssetAmount","sort","a","b","aDate","getTime","ttOrders","splice","state","bind","this","timer","setInterval","clearInterval","classes","currentTime","push","Fragment","Grid","item","xs","Paper","className","paper","length","CircularProgress","Table","size","TableHead","TableRow","TableCell","TableBody","index","cardTime","diff","minutes","Math","floor","seconds","hover","key","Avatar","variant","alt","src","React","Component","withStyles","theme","padding","spacing","textAlign","color","palette","text","secondary","helpIcon","marginLeft","Sold","getSold","offset","limit","asset_events","total_price","event_timestamp","relayer","now","CardDetails","handleChangePage","event","newPage","page","open","handleClose","Modal","modal","onClose","closeAfterTransition","BackdropComponent","Backdrop","Fade","in","Card","CardMedia","media","image","title","CardContent","slice","TablePagination","rowsPerPageOptions","component","count","rowsPerPage","onChangePage","height","display","alignItems","justifyContent","width","Trending","handleOpen","cardKey","openDialog","dialogCards","cardsMap","getTrending","cardsArr","lastTx","txIndex","transaction","id","Toolbar","Typography","Tooltip","placement","fontSize","onClick","substr","indexOf","History","getHistory","hours","done","forEach","handleChange","e","val","target","value","dateVal","FormControl","formControl","Select","labelId","onChange","MenuItem","margin","minWidth","createMuiTheme","type","TabPanel","children","Box","root","flexGrow","chart","useState","setValue","container","Link","href","rel","AppBar","position","Tabs","newValue","aria-label","Tab","label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.89d5247a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Avatar from '@material-ui/core/Avatar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpIcon from '@material-ui/icons/HelpOutline';\n\nconst styles = theme => ({\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  helpIcon: {\n    marginLeft: theme.spacing(1),\n  }\n});\n\nclass Orders extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      osOrders: [],\n      ttOrders: [],\n    }\n\n    this.getOsOrders = this.getOsOrders.bind(this);\n    this.getTtOrders = this.getTtOrders.bind(this);\n  }\n\n  componentDidMount() {\n    this.getOsOrders()\n    this.getTtOrders()\n    this.timer = setInterval(()=> {\n      this.getOsOrders()\n      this.getTtOrders()\n    }, 15000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer)\n    this.timer = null;\n  }\n\n  getOsOrders = () => {\n    fetch('https://api.opensea.io/wyvern/v1/orders?asset_contract_address=0x0e3a2a1f2146d86a604adc220b4967a898d7fe07&limit=100&side=1')\n    .then(res => {\n      return res.json()\n    }).then(data => {\n      let cards = data.orders.map((card) => {\n        let asset = card.asset\n        return(asset ? { name: asset.name, tokenId: asset.token_id, thumbnail: asset.image_thumbnail_url, preview: asset.image_preview_url, price: card.current_price/1000000000000000000, time: card.created_date, marketplace: 'OpenSea'} : {})\n      })\n      this.setState({osOrders: cards})\n    })\n  }\n\n  getTtOrders = () => {\n    fetch('https://gy2601wgv6.execute-api.us-east-1.amazonaws.com/dev/all-orders?tokenAddress=0x0e3a2a1f2146d86a604adc220b4967a898d7fe07',{ \n      method: 'get', \n      headers: new Headers({\n        'x-api-key': 'Np8BV2d5QR9TSFEr9EvF66FWcJf0wIxy2qBpOH6s', \n      }), \n    })\n    .then(res => {\n      return res.json()\n    }).then(data => {\n      let cards = data.map((card) => {\n        let metadata = JSON.parse(card.metadata)\n        let proto = card.token_proto.split('-')\n        let thumbnail = `https://storage.opensea.io/gods-unchained-asset-images/v0_0/proto${proto[0]}/quality${proto[1]}-thumbnail.png`\n        let preview = `https://storage.opensea.io/gods-unchained-asset-images/v0_0/proto${proto[0]}/quality${proto[1]}-preview.png`\n        let date = new Date(card.created_at)\n        date.setHours(date.getHours()+8)\n        return({ name: metadata.name, tokenId: card.token_id, thumbnail: thumbnail, preview: preview, price: card.takerAssetAmount/1000000000000000000, time: date, marketplace: 'token-trove'})\n      })\n      cards.sort((a,b) => {\n        let aDate = new Date(a.time)\n        let bDate = new Date(b.time)\n        return bDate.getTime() - aDate.getTime()\n      })\n      this.setState({ttOrders: cards.splice(0,100)})\n    })\n  }\n\n  render() {\n    const { classes } = this.props;\n    let currentTime = new Date();\n    let cards = [];\n    cards.push(...this.state.osOrders);\n    cards.push(...this.state.ttOrders);\n\n    cards.sort((a,b) => {\n      let aDate = new Date(a.time)\n      let bDate = new Date(b.time)\n      return bDate.getTime() - aDate.getTime()\n    })\n\n    return (\n      <React.Fragment>\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>\n            {cards.length <= 0 &&\n              <CircularProgress />\n            }\n            {cards.length > 0 &&\n              <Table size=\"small\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell></TableCell>\n                    <TableCell>Name</TableCell>\n                    <TableCell>Marketplace</TableCell>\n                    <TableCell>Price (ETH)</TableCell>\n                    <TableCell>Time Past</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {cards.map((card, index) => {\n                    let cardTime = new Date(card.time);\n                    cardTime.setHours(cardTime.getHours() - 8);\n\n                    let diff = currentTime - cardTime;\n                    let minutes = Math.floor(diff/60000);\n                    let seconds = Math.floor(diff/1000);\n                    return (\n                      <TableRow hover key={index}>\n                        <TableCell><Avatar variant=\"square\" alt={card.name} src={card.thumbnail} /></TableCell>\n                        <TableCell>{card.name}</TableCell>\n                        <TableCell>{card.marketplace}</TableCell>\n                        <TableCell>{card.price}</TableCell>\n                        <TableCell>{minutes > 0 ? minutes + ' mins' : seconds + ' secs'}</TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            }\n          </Paper>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nOrders.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Orders);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Avatar from '@material-ui/core/Avatar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpIcon from '@material-ui/icons/HelpOutline';\n\nconst styles = theme => ({\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  helpIcon: {\n    marginLeft: theme.spacing(1),\n  }\n});\n\nclass Sold extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cards: [],\n    }\n\n    this.getSold = this.getSold.bind(this);\n  }\n\n  componentDidMount() {\n    this.getSold(0,20)\n    this.timer = setInterval(()=> this.getSold(0,20), 15000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer)\n    this.timer = null;\n  }\n\n  getSold = (offset, limit) => {\n    fetch('https://api.opensea.io/api/v1/events?asset_contract_address=0x0e3a2a1f2146d86a604adc220b4967a898d7fe07&event_type=successful&limit=100')\n    .then(res => {\n      return res.json()\n    }).then(data => {\n      let cards = data.asset_events.map((card) => {\n        let asset = card.asset\n        return(asset ? { name: asset.name, tokenId: asset.token_id, thumbnail: asset.image_thumbnail_url, preview: asset.image_preview_url, price: card.total_price/1000000000000000000, time: card.event_timestamp, marketplace: card.relayer ? card.relayer : 'Immutable' } : {})\n      })\n      this.setState({cards: cards})\n    })\n  }\n\n  render() {\n    const { classes } = this.props;\n    let currentTime = Date.now();\n\n    return (\n      <React.Fragment>\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>\n            {/* <Toolbar>\n              <Tooltip className={classes.helpIcon} placement=\"right\" title=\"Shows OpenSea events which includes sold listings from both OpenSea and TokenTrove. Auto refreshes every 15s\">\n                <HelpIcon fontSize=\"small\" />\n              </Tooltip>\n            </Toolbar> */}\n            {this.state.cards.length <= 0 &&\n              <CircularProgress />\n            }\n            {this.state.cards.length > 0 &&\n              <Table size=\"small\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell></TableCell>\n                    <TableCell>Name</TableCell>\n                    <TableCell>Marketplace</TableCell>\n                    <TableCell>Price (ETH)</TableCell>\n                    <TableCell>Time Past</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {this.state.cards.map((card, index) => {\n                    let cardTime = new Date(card.time);\n                    cardTime.setHours(cardTime.getHours() - 8);\n\n                    let diff = currentTime - cardTime;\n                    let minutes = Math.floor(diff/60000);\n                    let seconds = Math.floor(diff/1000);\n                    return (\n                      <TableRow hover key={index}>\n                        <TableCell><Avatar variant=\"square\" alt={card.name} src={card.thumbnail} /></TableCell>\n                        <TableCell>{card.name}</TableCell>\n                        <TableCell>{card.marketplace}</TableCell>\n                        <TableCell>{card.price}</TableCell>\n                        <TableCell>{minutes > 0 ? minutes + ' mins' : seconds + ' secs'}</TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            }\n          </Paper>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nSold.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Sold);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Avatar from '@material-ui/core/Avatar';\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport TablePagination from '@material-ui/core/TablePagination';\n\nconst styles = theme => ({\n  card: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    height: 650,\n  },\n  helpIcon: {\n    marginLeft: theme.spacing(1),\n  },\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  media: {\n    height: 250,\n    width: 180,\n  },\n});\n\nclass CardDetails extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      page: 0,\n    }\n\n    this.handleChangePage = this.handleChangePage.bind(this);\n  }\n\n  handleChangePage = (event, newPage) => {\n    this.setState({page: newPage});\n  };\n\n  render() {\n    const { classes, open, handleClose, cards } = this.props;\n    let currentTime = new Date();\n    return (\n      <React.Fragment>\n        <Modal\n          className={classes.modal}\n          open={open}\n          onClose={() => {\n            this.setState({page: 0})\n            handleClose()\n          }}\n          closeAfterTransition\n          BackdropComponent={Backdrop}\n        >\n          <Fade in={this.props.open}>\n            {cards.length > 1 &&\n              <Card className={classes.card}>\n                <CardMedia\n                  className={classes.media}\n                  image={cards[0].preview}\n                  title={cards[0].name}\n                />\n                <CardContent>\n                <Table size=\"small\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell></TableCell>\n                      <TableCell>Name</TableCell>\n                      <TableCell>Price (ETH)</TableCell>\n                      <TableCell>Time Past</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {cards.slice(this.state.page * 5, this.state.page * 5 + 5).map((card, index) => {\n                      let cardTime = new Date(card.time);\n                      cardTime.setHours(cardTime.getHours() - 8);\n\n                      let diff = currentTime - cardTime;\n                      let minutes = Math.floor(diff/60000);\n                      let seconds = Math.floor(diff/1000);\n                      return (\n                        <TableRow hover key={index}>\n                          <TableCell><Avatar variant=\"square\" alt={card.name} src={card.thumbnail} /></TableCell>\n                          <TableCell>{card.name}</TableCell>\n                          <TableCell>{card.price}</TableCell>\n                          <TableCell>{minutes > 0 ? minutes + ' mins' : seconds + ' secs'}</TableCell>\n                        </TableRow>\n                      );\n                    })}\n                  </TableBody>\n                </Table>\n                <TablePagination\n                  rowsPerPageOptions={[5]}\n                  component=\"div\"\n                  count={cards.length}\n                  rowsPerPage={5}\n                  page={this.state.page}\n                  onChangePage={this.handleChangePage}\n                />\n                </CardContent>\n              </Card>\n            }\n          </Fade>\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}\n\nCardDetails.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(CardDetails);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpIcon from '@material-ui/icons/HelpOutline';\n\nimport CardDetails from './CardDetails';\n\nconst styles = theme => ({\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  helpIcon: {\n    marginLeft: theme.spacing(1),\n  },\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nclass Trending extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      openDialog: false,\n      dialogCards: [],\n      lastTx: 0,\n      cards: [],\n      cardsMap: {},\n    }\n\n    this.getTrending = this.getTrending.bind(this);\n    this.handleOpen = this.handleOpen.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n  }\n\n  handleOpen = (cardKey) => {\n    this.setState({openDialog: true, dialogCards: this.state.cardsMap[cardKey]})\n  };\n\n  handleClose = () => {\n    this.setState({openDialog: false})\n  };\n\n  componentDidMount() {\n    this.getTrending()\n    this.timer = setInterval(()=> this.getTrending(0,20), 15000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer)\n    this.timer = null;\n  }\n\n  getTrending = () => {\n    let cardsMap = this.state.cardsMap\n    let cardsArr = []\n\n    fetch('https://api.opensea.io/api/v1/events?asset_contract_address=0x0e3a2a1f2146d86a604adc220b4967a898d7fe07&event_type=successful&limit=300')\n    .then(res => {\n      return res.json()\n    }).then(data => {\n      let lastTx = this.state.lastTx\n      let txIndex = this.state.lastTx\n\n      data.asset_events.map((card) => {\n        let asset = card.asset\n        if (asset && card.transaction.id > lastTx) {\n          if (cardsMap[asset.image_thumbnail_url]) {\n            cardsMap[asset.image_thumbnail_url].push({ name: asset.name, thumbnail: asset.image_thumbnail_url, preview: asset.image_preview_url, price: card.total_price/1000000000000000000, time: card.event_timestamp });\n          } else {\n            cardsMap[asset.image_thumbnail_url] = [{ name: asset.name, thumbnail: asset.image_thumbnail_url, preview: asset.image_preview_url, price: card.total_price/1000000000000000000, time: card.event_timestamp }]\n          }\n          txIndex = card.transaction.id > txIndex ? card.transaction.id : txIndex\n        }\n      })\n      this.setState({lastTx: txIndex})\n    })\n\n    for (let item in cardsMap) {\n      let asset = cardsMap[item]\n      cardsArr.push({ name: asset[0].name, thumbnail: asset[0].thumbnail, count: asset.length })\n    }\n\n    cardsArr.sort((a,b) => {\n      return (a.count < b.count) ? 1 : -1\n    })\n\n    this.setState({cards: cardsArr, cardsMap: cardsMap})\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <React.Fragment>\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>\n            <Toolbar>\n              <Typography variant=\"h6\">\n                Trending Now\n              </Typography>\n              <Tooltip className={classes.helpIcon} placement=\"right\" title=\"Shows cards bought since this page was loaded. Auto refreshes every 15s\">\n                <HelpIcon fontSize=\"small\" />\n              </Tooltip>\n            </Toolbar>\n            {this.state.cards.length <= 0 &&\n              <CircularProgress />\n            }\n            {this.state.cards.length > 0 &&\n              <Table size=\"small\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell></TableCell>\n                    <TableCell>Name</TableCell>\n                    <TableCell>Volume</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {this.state.cards.map((card, index) => {\n                    return (\n                      <Tooltip key={index} className={classes.helpIcon} placement=\"right\" title={\"Click for details\"}>\n                        <TableRow hover onClick={() => this.handleOpen(card.thumbnail)}>\n                          <TableCell><Avatar variant=\"square\" alt={card.name} src={card.thumbnail} /></TableCell>\n                          <TableCell>{card.name.substr(0, card.name.indexOf(\"ID #\")-1)}</TableCell>\n                          <TableCell>{card.count}</TableCell>\n                        </TableRow>\n                      </Tooltip>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            }\n          </Paper>\n        </Grid>\n        <CardDetails open={this.state.openDialog} cards={this.state.dialogCards} handleClose={this.handleClose}/>\n      </React.Fragment>\n    );\n  }\n}\n\nTrending.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Trending);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpIcon from '@material-ui/icons/HelpOutline';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nimport CardDetails from './CardDetails';\n\nconst styles = theme => ({\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  helpIcon: {\n    marginLeft: theme.spacing(1),\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  }\n});\n\nclass History extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      openDialog: false,\n      dialogCards: [],\n      dateVal: 1,\n      cards: [],\n      cardsMap: {},\n    }\n\n    this.getHistory = this.getHistory.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleOpen = this.handleOpen.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n  }\n\n  handleOpen = (cardKey) => {\n    this.setState({openDialog: true, dialogCards: this.state.cardsMap[cardKey]})\n  };\n\n  handleClose = () => {\n    this.setState({openDialog: false})\n  };\n\n  componentDidMount() {\n    this.getHistory(this.state.dateVal)\n  }\n\n  getHistory = async (hours) => {\n    this.setState({cards: []})\n\n    let date = new Date();\n    date.setHours(date.getHours()+8-hours);\n    let cardsMap = {}\n    let cardsArr = []\n    let done = false\n    let offset = 0\n\n    while(!done) {\n      let res = await fetch('https://api.opensea.io/api/v1/events?asset_contract_address=0x0e3a2a1f2146d86a604adc220b4967a898d7fe07&event_type=successful&limit=100&offset='+offset)\n      let data = await res.json()\n\n      data.asset_events.forEach(event => {\n        let asset = event.asset\n        let cardTime = new Date(event.event_timestamp)\n        if (asset && cardTime > date) {\n          if (cardsMap[asset.image_thumbnail_url]) {\n            cardsMap[asset.image_thumbnail_url].push({ name: asset.name, thumbnail: asset.image_thumbnail_url, preview: asset.image_preview_url, price: event.total_price/1000000000000000000, time: event.event_timestamp });\n          } else {\n            cardsMap[asset.image_thumbnail_url] = [{ name: asset.name, thumbnail: asset.image_thumbnail_url, preview: asset.image_preview_url, price: event.total_price/1000000000000000000, time: event.event_timestamp }]\n          }\n        }\n\n        done = (cardTime < date) ? true : false\n        offset++\n      })\n    }\n\n    for (let item in cardsMap) {\n      let asset = cardsMap[item]\n      cardsArr.push({ name: asset[0].name, thumbnail: asset[0].thumbnail, count: asset.length })\n    }\n\n    cardsArr.sort((a,b) => {\n      return (a.count < b.count) ? 1 : -1\n    })\n\n    this.setState({cards: cardsArr, cardsMap: cardsMap})\n  }\n\n  handleChange = (e) => {\n    let val = e.target.value\n    this.setState({dateVal: val})\n    this.getHistory(val)\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <React.Fragment>\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>\n            <Toolbar>\n              <Typography>\n                Last\n              </Typography>\n              <FormControl className={classes.formControl}>\n                {/* <InputLabel id=\"demo-simple-select-label\">Time</InputLabel> */}\n                <Select\n                  labelId=\"demo-simple-select-label\"\n                  id=\"demo-simple-select\"\n                  value={this.state.dateVal}\n                  onChange={this.handleChange}\n                >\n                  <MenuItem value={1}>1 hr</MenuItem>\n                  <MenuItem value={3}>3 hrs</MenuItem>\n                  <MenuItem value={6}>6 hrs</MenuItem>\n                  <MenuItem value={12}>12 hrs</MenuItem>\n                  <MenuItem value={24}>24 hrs</MenuItem>\n                </Select>\n              </FormControl>\n              <Tooltip className={classes.helpIcon} placement=\"right\" title=\"Shows cards bought since the given time.\">\n                <HelpIcon fontSize=\"small\" />\n              </Tooltip>\n            </Toolbar>\n            {this.state.cards.length <= 0 &&\n              <CircularProgress />\n            }\n            {this.state.cards.length > 0 &&\n              <Table size=\"small\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell></TableCell>\n                    <TableCell>Name</TableCell>\n                    <TableCell>Volume</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {this.state.cards.map((card, index) => {\n                    return (\n                      <Tooltip key={index} className={classes.helpIcon} placement=\"right\" title=\"Click for details\">\n                        <TableRow hover onClick={() => this.handleOpen(card.thumbnail)}>\n                          <TableCell><Avatar variant=\"square\" alt={card.name} src={card.thumbnail} /></TableCell>\n                          <TableCell>{card.name.substr(0, card.name.indexOf(\"ID #\")-1)}</TableCell>\n                          <TableCell>{card.count}</TableCell>\n                        </TableRow>\n                      </Tooltip>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            }\n          </Paper>\n        </Grid>\n        <CardDetails open={this.state.openDialog} cards={this.state.dialogCards} handleClose={this.handleClose}/>\n      </React.Fragment>\n    );\n  }\n}\n\nHistory.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(History);","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Box from '@material-ui/core/Box';\nimport Link from '@material-ui/core/Link';\n\nimport Orders from './Components/Orders';\nimport Sold from './Components/Sold';\nimport Trending from './Components/Trending';\nimport History from './Components/History';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    // padding: theme.spacing(4),\n  },\n  chart: {\n    flexGrow: 1,\n    padding: theme.spacing(6),\n  },\n  paper: {\n    padding: theme.spacing(4),\n  },\n  text: {\n    padding: theme.spacing(1),\n  },\n});\n\nfunction TabPanel(props) {\n  const { children, value, index } = props;\n\n  return (\n    <React.Fragment>\n      {value === index && <Box>{children}</Box>}\n    </React.Fragment>\n  );\n}\n\nfunction App(props) {\n  const { classes } = props;\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <React.Fragment>\n      <MuiThemeProvider theme={theme}>\n        <Grid container spacing={2} className={classes.root}>\n          <Grid container spacing={2} className={classes.chart}>\n            <Grid item xs={3}>\n              <Paper className={classes.paper}>\n                <Typography>\n                  Data polled every 15s from:\n                </Typography>\n                <Typography>\n                  <Link href=\"https://tokentrove.com/\" target=\"_blank\" rel=\"noopener\" rel=\"noreferrer\" color=\"secondary\">\n                    TokenTrove\n                  </Link>\n                </Typography>\n                <Typography>\n                  <Link href=\"https://opensea.io//\" target=\"_blank\" rel=\"noopener\" rel=\"noreferrer\" color=\"secondary\">\n                    OpenSea\n                  </Link>\n                </Typography>\n              </Paper>\n            </Grid>\n            <Grid item xs={9}>\n              <Paper className={classes.paper}>\n                <Typography>\n                  Hey all! I'm planning on adding more features in the future.\n                </Typography>\n                <Typography>\n                  For feedback and suggestions use discord: FourShore#9099\n                </Typography>\n                <Typography>\n                  If you'd like to contribute to this project you can send ETH to 0x91C20ef6477c4Ff9CfeCC48861E56c0dA1Dd37fD :)\n                </Typography>\n              </Paper>\n            </Grid>\n            <Grid item xs={3}>\n              <Trending/>\n            </Grid>\n            {/* <Grid item xs={6}>\n              <Trending/>\n            </Grid> */}\n            <Grid item xs={9}>\n              <AppBar position=\"static\" color=\"inherit\">\n                <Tabs value={value} onChange={handleChange} aria-label=\"nav tabs\">\n                  <Tab label=\"Recent Listings\"/>\n                  <Tab label=\"Last Sold\"/>\n                  <Tab label=\"Volume History\"/>\n                </Tabs>\n              </AppBar>\n              <TabPanel value={value} index={0}>\n                <Orders/>\n              </TabPanel>\n              <TabPanel value={value} index={1}>\n                <Sold/>\n              </TabPanel>\n              <TabPanel value={value} index={2}>\n                <History/>\n              </TabPanel>\n            </Grid>\n          </Grid>\n        </Grid>\n      </MuiThemeProvider>\n    </React.Fragment>\n  );\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}