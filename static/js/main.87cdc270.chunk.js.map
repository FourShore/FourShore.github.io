{"version":3,"sources":["Components/Orders.js","Components/Sold.js","Components/CardDetails.js","Components/Trending.js","Components/History.js","App.js","serviceWorker.js","index.js"],"names":["Orders","props","getOsOrders","fetch","then","res","json","data","cards","orders","map","card","asset","proto_id","image_url","replace","quality","substring","indexOf","proto","name","tokenId","token_id","thumbnail","image_thumbnail_url","preview","image_preview_url","price","current_price","time","created_date","marketplace","setState","osOrders","getTtOrders","method","headers","Headers","metadata","JSON","parse","token_proto","split","date","Date","created_at","setHours","getHours","takerAssetAmount","sort","a","b","aDate","getTime","ttOrders","splice","getTtFilled","cardsMap","forEach","ttFiled","state","bind","this","timer","setInterval","clearInterval","classes","currentTime","push","Fragment","Grid","item","xs","Paper","className","paper","length","CircularProgress","Table","size","TableHead","TableRow","TableCell","TableBody","index","cardTime","diff","minutes","Math","floor","seconds","hover","key","Avatar","variant","alt","src","React","Component","withStyles","theme","padding","spacing","textAlign","color","palette","text","secondary","helpIcon","marginLeft","Sold","getSold","offset","limit","asset_events","total_price","event_timestamp","relayer","now","CardDetails","handleChangePage","event","newPage","page","open","handleClose","Modal","modal","onClose","closeAfterTransition","BackdropComponent","Backdrop","Fade","in","Card","CardMedia","media","image","title","CardContent","slice","TablePagination","rowsPerPageOptions","component","count","rowsPerPage","onChangePage","height","display","alignItems","justifyContent","width","Trending","handleOpen","cardKey","openDialog","dialogCards","getTrending","cardsArr","lastTx","Toolbar","Typography","Tooltip","placement","fontSize","onClick","substr","History","getHistory","hours","done","handleChange","e","val","target","value","dateVal","FormControl","formControl","Select","labelId","id","onChange","MenuItem","margin","minWidth","createMuiTheme","type","TabPanel","children","Box","root","flexGrow","chart","useState","setValue","container","Link","href","rel","AppBar","position","Tabs","newValue","aria-label","Tab","label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.87cdc270.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Avatar from '@material-ui/core/Avatar';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst styles = theme => ({\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  helpIcon: {\n    marginLeft: theme.spacing(1),\n  }\n});\n\nclass Orders extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      osOrders: [],\n      ttOrders: [],\n      ttFiled: {},\n    }\n\n    this.getOsOrders = this.getOsOrders.bind(this);\n    this.getTtOrders = this.getTtOrders.bind(this);\n    this.getTtFilled = this.getTtFilled.bind(this);\n  }\n\n  componentDidMount() {\n    this.getOsOrders()\n    this.getTtOrders()\n    this.timer = setInterval(()=> {\n      this.getOsOrders()\n      this.getTtOrders()\n      this.getTtFilled()\n    }, 15000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer)\n    this.timer = null;\n  }\n\n  getOsOrders = () => {\n    fetch('https://api.opensea.io/wyvern/v1/orders?asset_contract_address=0x0e3a2a1f2146d86a604adc220b4967a898d7fe07&limit=100&side=1')\n    .then(res => {\n      return res.json()\n    }).then(data => {\n      let cards = data.orders.map((card) => {\n        let asset = card.asset\n        let proto_id = asset ? asset.image_url.replace('https://storage.opensea.io/gods-unchained-asset-images/v0_0/proto', '') : ''\n        let quality = proto_id.substring(proto_id.indexOf('/quality') + 8)\n        quality = quality.replace('.png', '')\n        proto_id = proto_id.substring(0, proto_id.indexOf('/quality'))\n        return(asset ? { proto: `${proto_id}-${quality}`, name: asset.name, tokenId: asset.token_id, thumbnail: asset.image_thumbnail_url, preview: asset.image_preview_url, price: card.current_price/1000000000000000000, time: card.created_date, marketplace: 'OpenSea'} : {})\n      })\n      this.setState({osOrders: cards})\n    })\n  }\n\n  getTtOrders = () => {\n    fetch('https://gy2601wgv6.execute-api.us-east-1.amazonaws.com/dev/all-orders?tokenAddress=0x0e3a2a1f2146d86a604adc220b4967a898d7fe07',{ \n      method: 'get', \n      headers: new Headers({\n        'x-api-key': 'Np8BV2d5QR9TSFEr9EvF66FWcJf0wIxy2qBpOH6s', \n      }), \n    })\n    .then(res => {\n      return res.json()\n    }).then(data => {\n      let cards = data.map((card) => {\n        let metadata = JSON.parse(card.metadata)\n        let proto = card.token_proto.split('-')\n        let thumbnail = `https://storage.opensea.io/gods-unchained-asset-images/v0_0/proto${proto[0]}/quality${proto[1]}-thumbnail.png`\n        let preview = `https://storage.opensea.io/gods-unchained-asset-images/v0_0/proto${proto[0]}/quality${proto[1]}-preview.png`\n        let date = new Date(card.created_at)\n        date.setHours(date.getHours()+8)\n        return({ proto: card.token_proto, name: `${metadata.name} ID #${card.token_id}`, tokenId: card.token_id, thumbnail: thumbnail, preview: preview, price: card.takerAssetAmount/1000000000000000000, time: date, marketplace: 'token-trove'})\n      })\n      cards.sort((a,b) => {\n        let aDate = new Date(a.time)\n        let bDate = new Date(b.time)\n        return bDate.getTime() - aDate.getTime()\n      })\n      this.setState({ttOrders: cards.splice(0,100)})\n    })\n  }\n\n  getTtFilled = () => {\n    fetch('https://gy2601wgv6.execute-api.us-east-1.amazonaws.com/dev/historical-prices?tokenAddress=0x0e3a2a1f2146d86a604adc220b4967a898d7fe07',{ \n      method: 'get', \n      headers: new Headers({\n        'x-api-key': 'Np8BV2d5QR9TSFEr9EvF66FWcJf0wIxy2qBpOH6s', \n      }), \n    })\n    .then(res => {\n      return res.json()\n    }).then(data => {\n      let cardsMap = {}\n\n      data.forEach(card => {\n        cardsMap[card.proto] = card.price/1000000000000000000\n      })\n\n      this.setState({ttFiled: cardsMap})\n    })\n  }\n\n  render() {\n    const { classes } = this.props;\n    let currentTime = new Date();\n    let cards = [];\n    cards.push(...this.state.osOrders);\n    cards.push(...this.state.ttOrders);\n\n    cards.sort((a,b) => {\n      let aDate = new Date(a.time)\n      let bDate = new Date(b.time)\n      return bDate.getTime() - aDate.getTime()\n    })\n\n    return (\n      <React.Fragment>\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>\n            {cards.length <= 0 &&\n              <CircularProgress />\n            }\n            {cards.length > 0 &&\n              <Table size=\"small\">\n                <TableHead>\n                  <TableRow>\n                    {/* <TableCell></TableCell> */}\n                    <TableCell></TableCell>\n                    <TableCell>Name</TableCell>\n                    {/* <TableCell>Buy</TableCell> */}\n                    <TableCell>Marketplace</TableCell>\n                    <TableCell>Price (ETH)</TableCell>\n                    <TableCell>Time Past</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {cards.map((card, index) => {\n                    let cardTime = new Date(card.time);\n                    cardTime.setHours(cardTime.getHours() - 8);\n\n                    let diff = currentTime - cardTime;\n                    let minutes = Math.floor(diff/60000);\n                    let seconds = Math.floor(diff/1000);\n\n                    // let valueOffer =  this.state.ttFiled[card.proto] - card.price >= .1\n                    // console.log(index, card.name, this.state.ttFiled[card.proto], card.price, valueOffer)\n                    return (\n                      <TableRow hover key={index}>\n                        {/* <TableCell>{index}</TableCell> */}\n                        <TableCell><Avatar variant=\"square\" alt={card.name} src={card.thumbnail} /></TableCell>\n                        <TableCell>{card.name}</TableCell>\n                        {/* <TableCell>{valueOffer && this.state.ttFiled[card.proto]}</TableCell> */}\n                        <TableCell>{card.marketplace}</TableCell>\n                        <TableCell>{card.price}</TableCell>\n                        <TableCell>{minutes > 0 ? minutes + ' mins' : seconds + ' secs'}</TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            }\n          </Paper>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nOrders.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Orders);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Avatar from '@material-ui/core/Avatar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpIcon from '@material-ui/icons/HelpOutline';\n\nconst styles = theme => ({\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  helpIcon: {\n    marginLeft: theme.spacing(1),\n  }\n});\n\nclass Sold extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cards: [],\n    }\n\n    this.getSold = this.getSold.bind(this);\n  }\n\n  componentDidMount() {\n    this.getSold(0,20)\n    this.timer = setInterval(()=> this.getSold(0,20), 15000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer)\n    this.timer = null;\n  }\n\n  getSold = (offset, limit) => {\n    fetch('https://api.opensea.io/api/v1/events?asset_contract_address=0x0e3a2a1f2146d86a604adc220b4967a898d7fe07&event_type=successful&limit=100')\n    .then(res => {\n      return res.json()\n    }).then(data => {\n      let cards = data.asset_events.map((card) => {\n        let asset = card.asset\n        return(asset ? { name: asset.name, tokenId: asset.token_id, thumbnail: asset.image_thumbnail_url, preview: asset.image_preview_url, price: card.total_price/1000000000000000000, time: card.event_timestamp, marketplace: card.relayer ? card.relayer : 'Immutable' } : {})\n      })\n      this.setState({cards: cards})\n    })\n  }\n\n  render() {\n    const { classes } = this.props;\n    let currentTime = Date.now();\n\n    return (\n      <React.Fragment>\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>\n            {/* <Toolbar>\n              <Tooltip className={classes.helpIcon} placement=\"right\" title=\"Shows OpenSea events which includes sold listings from both OpenSea and TokenTrove. Auto refreshes every 15s\">\n                <HelpIcon fontSize=\"small\" />\n              </Tooltip>\n            </Toolbar> */}\n            {this.state.cards.length <= 0 &&\n              <CircularProgress />\n            }\n            {this.state.cards.length > 0 &&\n              <Table size=\"small\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell></TableCell>\n                    <TableCell>Name</TableCell>\n                    <TableCell>Marketplace</TableCell>\n                    <TableCell>Price (ETH)</TableCell>\n                    <TableCell>Time Past</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {this.state.cards.map((card, index) => {\n                    let cardTime = new Date(card.time);\n                    cardTime.setHours(cardTime.getHours() - 8);\n\n                    let diff = currentTime - cardTime;\n                    let minutes = Math.floor(diff/60000);\n                    let seconds = Math.floor(diff/1000);\n                    return (\n                      <TableRow hover key={index}>\n                        <TableCell><Avatar variant=\"square\" alt={card.name} src={card.thumbnail} /></TableCell>\n                        <TableCell>{card.name}</TableCell>\n                        <TableCell>{card.marketplace}</TableCell>\n                        <TableCell>{card.price}</TableCell>\n                        <TableCell>{minutes > 0 ? minutes + ' mins' : seconds + ' secs'}</TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            }\n          </Paper>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nSold.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Sold);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Avatar from '@material-ui/core/Avatar';\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport TablePagination from '@material-ui/core/TablePagination';\n\nconst styles = theme => ({\n  card: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    height: 650,\n  },\n  helpIcon: {\n    marginLeft: theme.spacing(1),\n  },\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  media: {\n    height: 250,\n    width: 180,\n  },\n});\n\nclass CardDetails extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      page: 0,\n    }\n\n    this.handleChangePage = this.handleChangePage.bind(this);\n  }\n\n  handleChangePage = (event, newPage) => {\n    this.setState({page: newPage});\n  };\n\n  render() {\n    const { classes, open, handleClose, cards } = this.props;\n    let currentTime = new Date();\n    return (\n      <React.Fragment>\n        <Modal\n          className={classes.modal}\n          open={open}\n          onClose={() => {\n            this.setState({page: 0})\n            handleClose()\n          }}\n          closeAfterTransition\n          BackdropComponent={Backdrop}\n        >\n          <Fade in={this.props.open}>\n            {cards.length > 1 &&\n              <Card className={classes.card}>\n                <CardMedia\n                  className={classes.media}\n                  image={cards[0].preview}\n                  title={cards[0].name}\n                />\n                <CardContent>\n                <Table size=\"small\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell></TableCell>\n                      <TableCell>Name</TableCell>\n                      <TableCell>Price (ETH)</TableCell>\n                      <TableCell>Time Past</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {cards.slice(this.state.page * 5, this.state.page * 5 + 5).map((card, index) => {\n                      let cardTime = new Date(card.time);\n                      cardTime.setHours(cardTime.getHours() - 8);\n\n                      let diff = currentTime - cardTime;\n                      let minutes = Math.floor(diff/60000);\n                      let seconds = Math.floor(diff/1000);\n                      return (\n                        <TableRow hover key={index}>\n                          <TableCell><Avatar variant=\"square\" alt={card.name} src={card.thumbnail} /></TableCell>\n                          <TableCell>{card.name}</TableCell>\n                          <TableCell>{card.price}</TableCell>\n                          <TableCell>{minutes > 0 ? minutes + ' mins' : seconds + ' secs'}</TableCell>\n                        </TableRow>\n                      );\n                    })}\n                  </TableBody>\n                </Table>\n                <TablePagination\n                  rowsPerPageOptions={[5]}\n                  component=\"div\"\n                  count={cards.length}\n                  rowsPerPage={5}\n                  page={this.state.page}\n                  onChangePage={this.handleChangePage}\n                />\n                </CardContent>\n              </Card>\n            }\n          </Fade>\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}\n\nCardDetails.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(CardDetails);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpIcon from '@material-ui/icons/HelpOutline';\n\nimport CardDetails from './CardDetails';\n\nconst styles = theme => ({\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  helpIcon: {\n    marginLeft: theme.spacing(1),\n  },\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nclass Trending extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      openDialog: false,\n      dialogCards: [],\n      lastTx: 0,\n      cards: [],\n      cardsMap: {},\n    }\n\n    this.getTrending = this.getTrending.bind(this);\n    this.handleOpen = this.handleOpen.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n  }\n\n  handleOpen = (cardKey) => {\n    this.setState({openDialog: true, dialogCards: this.state.cardsMap[cardKey]})\n  };\n\n  handleClose = () => {\n    this.setState({openDialog: false})\n  };\n\n  componentDidMount() {\n    this.getTrending()\n    this.timer = setInterval(()=> this.getTrending(0,20), 15000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer)\n    this.timer = null;\n  }\n\n  // getTrending = () => {\n  //   let cardsMap = this.state.cardsMap\n  //   let cardsArr = []\n\n  //   fetch('https://api.opensea.io/api/v1/events?asset_contract_address=0x0e3a2a1f2146d86a604adc220b4967a898d7fe07&event_type=successful&limit=300')\n  //   .then(res => {\n  //     return res.json()\n  //   }).then(data => {\n  //     let lastTx = this.state.lastTx\n  //     let txIndex = this.state.lastTx\n\n  //     data.asset_events.map((card) => {\n  //       let asset = card.asset\n  //       if (asset && card.transaction.id > lastTx) {\n  //         if (cardsMap[asset.image_thumbnail_url]) {\n  //           cardsMap[asset.image_thumbnail_url].push({ name: asset.name, thumbnail: asset.image_thumbnail_url, preview: asset.image_preview_url, price: card.total_price/1000000000000000000, time: card.event_timestamp });\n  //         } else {\n  //           cardsMap[asset.image_thumbnail_url] = [{ name: asset.name, thumbnail: asset.image_thumbnail_url, preview: asset.image_preview_url, price: card.total_price/1000000000000000000, time: card.event_timestamp }]\n  //         }\n  //         txIndex = card.transaction.id > txIndex ? card.transaction.id : txIndex\n  //       }\n  //     })\n  //     this.setState({lastTx: txIndex})\n  //   })\n\n  //   for (let item in cardsMap) {\n  //     let asset = cardsMap[item]\n  //     cardsArr.push({ name: asset[0].name, thumbnail: asset[0].thumbnail, count: asset.length })\n  //   }\n\n  //   cardsArr.sort((a,b) => {\n  //     return (a.count < b.count) ? 1 : -1\n  //   })\n\n  //   this.setState({cards: cardsArr, cardsMap: cardsMap})\n  // }\n\n  getTrending = () => {\n    fetch('https://api.opensea.io/api/v1/events?asset_contract_address=0x0e3a2a1f2146d86a604adc220b4967a898d7fe07&event_type=successful&limit=300')\n    .then(res => {\n      return res.json()\n    }).then(data => {\n      let cardsMap = {}\n      let cardsArr = []\n\n      data.asset_events.map((card) => {\n        let asset = card.asset\n        if (asset) {\n          if (cardsMap[asset.image_thumbnail_url]) {\n            cardsMap[asset.image_thumbnail_url].push({ name: asset.name, thumbnail: asset.image_thumbnail_url, preview: asset.image_preview_url, price: card.total_price/1000000000000000000, time: card.event_timestamp });\n          } else {\n            cardsMap[asset.image_thumbnail_url] = [{ name: asset.name, thumbnail: asset.image_thumbnail_url, preview: asset.image_preview_url, price: card.total_price/1000000000000000000, time: card.event_timestamp }]\n          }\n        }\n      })\n      \n      for (let item in cardsMap) {\n        let asset = cardsMap[item]\n        cardsArr.push({ name: asset[0].name, thumbnail: asset[0].thumbnail, count: asset.length })\n      }\n\n      cardsArr.sort((a,b) => {\n        return (a.count < b.count) ? 1 : -1\n      })\n\n      this.setState({cards: cardsArr, cardsMap: cardsMap})\n    })\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <React.Fragment>\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>\n            <Toolbar>\n              <Typography variant=\"h6\">\n                Trending Now\n              </Typography>\n              <Tooltip className={classes.helpIcon} placement=\"right\" title=\"Shows the last 300 cards bought. Auto refreshes every 15s\">\n                <HelpIcon fontSize=\"small\" />\n              </Tooltip>\n            </Toolbar>\n            {this.state.cards.length <= 0 &&\n              <CircularProgress />\n            }\n            {this.state.cards.length > 0 &&\n              <Table size=\"small\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell></TableCell>\n                    <TableCell>Name</TableCell>\n                    <TableCell>Volume</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {this.state.cards.map((card, index) => {\n                    return (\n                      <Tooltip key={index} className={classes.helpIcon} placement=\"right\" title={\"Click for details\"}>\n                        <TableRow hover onClick={() => this.handleOpen(card.thumbnail)}>\n                          <TableCell><Avatar variant=\"square\" alt={card.name} src={card.thumbnail} /></TableCell>\n                          <TableCell>{card.name.substr(0, card.name.indexOf(\"ID #\")-1)}</TableCell>\n                          <TableCell>{card.count}</TableCell>\n                        </TableRow>\n                      </Tooltip>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            }\n          </Paper>\n        </Grid>\n        <CardDetails open={this.state.openDialog} cards={this.state.dialogCards} handleClose={this.handleClose}/>\n      </React.Fragment>\n    );\n  }\n}\n\nTrending.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Trending);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpIcon from '@material-ui/icons/HelpOutline';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nimport CardDetails from './CardDetails';\n\nconst styles = theme => ({\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  helpIcon: {\n    marginLeft: theme.spacing(1),\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  }\n});\n\nclass History extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      openDialog: false,\n      dialogCards: [],\n      dateVal: 1,\n      cards: [],\n      cardsMap: {},\n    }\n\n    this.getHistory = this.getHistory.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleOpen = this.handleOpen.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n  }\n\n  handleOpen = (cardKey) => {\n    this.setState({openDialog: true, dialogCards: this.state.cardsMap[cardKey]})\n  };\n\n  handleClose = () => {\n    this.setState({openDialog: false})\n  };\n\n  componentDidMount() {\n    this.getHistory(this.state.dateVal)\n  }\n\n  getHistory = async (hours) => {\n    this.setState({cards: []})\n\n    let date = new Date();\n    date.setHours(date.getHours()+8-hours);\n    let cardsMap = {}\n    let cardsArr = []\n    let done = false\n    let offset = 0\n\n    while(!done) {\n      let res = await fetch('https://api.opensea.io/api/v1/events?asset_contract_address=0x0e3a2a1f2146d86a604adc220b4967a898d7fe07&event_type=successful&limit=100&offset='+offset)\n      let data = await res.json()\n\n      data.asset_events.forEach(event => {\n        let asset = event.asset\n        let cardTime = new Date(event.event_timestamp)\n        if (asset && cardTime > date) {\n          if (cardsMap[asset.image_thumbnail_url]) {\n            cardsMap[asset.image_thumbnail_url].push({ name: asset.name, thumbnail: asset.image_thumbnail_url, preview: asset.image_preview_url, price: event.total_price/1000000000000000000, time: event.event_timestamp });\n          } else {\n            cardsMap[asset.image_thumbnail_url] = [{ name: asset.name, thumbnail: asset.image_thumbnail_url, preview: asset.image_preview_url, price: event.total_price/1000000000000000000, time: event.event_timestamp }]\n          }\n        }\n\n        done = (cardTime < date) ? true : false\n        offset++\n      })\n    }\n\n    for (let item in cardsMap) {\n      let asset = cardsMap[item]\n      cardsArr.push({ name: asset[0].name, thumbnail: asset[0].thumbnail, count: asset.length })\n    }\n\n    cardsArr.sort((a,b) => {\n      return (a.count < b.count) ? 1 : -1\n    })\n\n    this.setState({cards: cardsArr, cardsMap: cardsMap})\n  }\n\n  handleChange = (e) => {\n    let val = e.target.value\n    this.setState({dateVal: val})\n    this.getHistory(val)\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <React.Fragment>\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>\n            <Toolbar>\n              <Typography>\n                Last\n              </Typography>\n              <FormControl className={classes.formControl}>\n                {/* <InputLabel id=\"demo-simple-select-label\">Time</InputLabel> */}\n                <Select\n                  labelId=\"demo-simple-select-label\"\n                  id=\"demo-simple-select\"\n                  value={this.state.dateVal}\n                  onChange={this.handleChange}\n                >\n                  <MenuItem value={1}>1 hr</MenuItem>\n                  <MenuItem value={3}>3 hrs</MenuItem>\n                  <MenuItem value={6}>6 hrs</MenuItem>\n                  <MenuItem value={12}>12 hrs</MenuItem>\n                  <MenuItem value={24}>24 hrs</MenuItem>\n                </Select>\n              </FormControl>\n              <Tooltip className={classes.helpIcon} placement=\"right\" title=\"Shows cards bought since the given time.\">\n                <HelpIcon fontSize=\"small\" />\n              </Tooltip>\n            </Toolbar>\n            {this.state.cards.length <= 0 &&\n              <CircularProgress />\n            }\n            {this.state.cards.length > 0 &&\n              <Table size=\"small\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell></TableCell>\n                    <TableCell>Name</TableCell>\n                    <TableCell>Volume</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {this.state.cards.map((card, index) => {\n                    return (\n                      <Tooltip key={index} className={classes.helpIcon} placement=\"right\" title=\"Click for details\">\n                        <TableRow hover onClick={() => this.handleOpen(card.thumbnail)}>\n                          <TableCell><Avatar variant=\"square\" alt={card.name} src={card.thumbnail} /></TableCell>\n                          <TableCell>{card.name.substr(0, card.name.indexOf(\"ID #\")-1)}</TableCell>\n                          <TableCell>{card.count}</TableCell>\n                        </TableRow>\n                      </Tooltip>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            }\n          </Paper>\n        </Grid>\n        <CardDetails open={this.state.openDialog} cards={this.state.dialogCards} handleClose={this.handleClose}/>\n      </React.Fragment>\n    );\n  }\n}\n\nHistory.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(History);","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Box from '@material-ui/core/Box';\nimport Link from '@material-ui/core/Link';\n\nimport Orders from './Components/Orders';\nimport Sold from './Components/Sold';\nimport Trending from './Components/Trending';\nimport History from './Components/History';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    // padding: theme.spacing(4),\n  },\n  chart: {\n    flexGrow: 1,\n    padding: theme.spacing(6),\n  },\n  paper: {\n    padding: theme.spacing(4),\n  },\n  text: {\n    padding: theme.spacing(1),\n  },\n});\n\nfunction TabPanel(props) {\n  const { children, value, index } = props;\n\n  return (\n    <React.Fragment>\n      {value === index && <Box>{children}</Box>}\n    </React.Fragment>\n  );\n}\n\nfunction App(props) {\n  const { classes } = props;\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <React.Fragment>\n      <MuiThemeProvider theme={theme}>\n        <Grid container spacing={2} className={classes.root}>\n          <Grid container spacing={2} className={classes.chart}>\n            <Grid item xs={3}>\n              <Paper className={classes.paper}>\n                <Typography>\n                  Data polled every 15s from:\n                </Typography>\n                <Typography>\n                  <Link href=\"https://tokentrove.com/\" target=\"_blank\" rel=\"noopener\" rel=\"noreferrer\" color=\"secondary\">\n                    TokenTrove\n                  </Link>\n                </Typography>\n                <Typography>\n                  <Link href=\"https://opensea.io//\" target=\"_blank\" rel=\"noopener\" rel=\"noreferrer\" color=\"secondary\">\n                    OpenSea\n                  </Link>\n                </Typography>\n              </Paper>\n            </Grid>\n            <Grid item xs={9}>\n              <Paper className={classes.paper}>\n                <Typography>\n                  Hey all! I'm planning on adding more features in the future.\n                </Typography>\n                <Typography>\n                  For feedback and suggestions use discord: FourShore#9099\n                </Typography>\n                <Typography>\n                  If you'd like to contribute to this project you can send ETH to 0x91C20ef6477c4Ff9CfeCC48861E56c0dA1Dd37fD :)\n                </Typography>\n              </Paper>\n            </Grid>\n            <Grid item xs={3}>\n              <Trending/>\n            </Grid>\n            {/* <Grid item xs={6}>\n              <Trending/>\n            </Grid> */}\n            <Grid item xs={9}>\n              <AppBar position=\"static\" color=\"inherit\">\n                <Tabs value={value} onChange={handleChange} aria-label=\"nav tabs\">\n                  <Tab label=\"Recent Listings\"/>\n                  <Tab label=\"Last Sold\"/>\n                  <Tab label=\"Volume History\"/>\n                </Tabs>\n              </AppBar>\n              <TabPanel value={value} index={0}>\n                <Orders/>\n              </TabPanel>\n              <TabPanel value={value} index={1}>\n                <Sold/>\n              </TabPanel>\n              <TabPanel value={value} index={2}>\n                <History/>\n              </TabPanel>\n            </Grid>\n          </Grid>\n        </Grid>\n      </MuiThemeProvider>\n    </React.Fragment>\n  );\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}